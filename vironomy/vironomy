#!/usr/bin/python

from vironomy.utils import import_queries,import_reference_dbs,import_full_db
import os
import pandas as pd 
import scipy
import itertools
from collections import Counter
from Bio import SeqIO
from vironomy.build_tree import treebuild
from vironomy.classify import queryset
import click
import pickle

### next dev tasks

# write unit tests
# test on space genomes

# adapt function for big trees -- incorporate a "split" distance that separates trees out

# run on the entirety of imgvr

# other examples
# what happens if you put double and single stranded viruses together
# what happens if you put RNA and DNA viruses together

@click.group()
def cli():
	pass
   # '''Massive-scale, de novo viral phylogenetics with vironomy.
    #'''
    #if ctx.invoked_subcommand is None:
    #    end_to_end(ctx, classify, phylogeny)

@cli.command('classify')
@click.option('-i','--inputs', required=True, help='File containing your query genomes.',type = str)
@click.option('-d','--dbdir', required = True, help='Path to directory containing databases.',type = str)
@click.option('--hmmdb', required = False,default = 'Default', help='Selected HMM db. Default, NeoRdRp, or XXX. [Default = Default].',type = str)
@click.option('--multicopy', required = False,is_flag = True, help='Work with HMM that are multi-copy in a single genome, instead of only single copy ones, per your e-value cutoff.')
@click.option('-o','--outputdir',required = False, default='vironomy_output', help='Path to classification output directory [Default = vironomy_output]',type = str)
@click.option('-l','--taxonomiclevel',required = False, default='Genus', help='Target taxonomic classification level: Phylum, Class, Order, Family, Genus, Species [Default = Genus]',type = str)
@click.option('-h','--hitstoreport', required = False, default=5, help='Number of taxonomic hits to report. [Default = 5]',type = int)
@click.option('-s','--subcluster', required = False, default=True, help='True/False. Run secondary clustering for more accurate taxonomic classification [Default = True]')
@click.option('-e','--evaluecutoff', required = False, default=0.01, help='E-value cutoff for hmmsearch [Default = 0.01].',type = float)
@click.option('-p','--threads', required = False, default=1, help='Number of CPU threads to use [Default = 1].', type = int)
@click.option('-t','--tmpdir', required = False, default='tmp', help='Name of classification temporary directory [Default = tmp].',type = str)
@click.option('-f','--force', is_flag = True, help='Remake any existing ORF calling, HMM, or alignment files.')
def classify(inputs,dbdir,hmmdb,multicopy,outputdir,taxonomiclevel,hitstoreport,subcluster,evaluecutoff,threads,tmpdir,force):
	fulldb = dbdir + '/full_sc_marker_db.csv'
	markermatrixref = dbdir+ '/'+taxonomiclevel+'_single_copy_marker_database.csv'
	taxmap = dbdir + '/'+taxonomiclevel+'_group_taxid_contigid_mapping_annotation_data.tsv'
	if hmmdb == 'Default':
		hmmpath = dbdir + '/single_copy_marker_db.hmm'
	if hmmdb == 'NeoRdRp':
		hmmpath = dbdir + '/NeoRdRp-HMM.v1.1.hmm'
	if hmmdb == 'cp77':
		hmmpath = dbdir + '/cp77.hmm'
	if multicopy:
		multicopystatus = True
	if not multicopy:
		multicopystatus = False
	predictedgenesout = outputdir + '/query_orfs.faa' 
	markerout = outputdir + '/query.pfam.tigrfam.annotations.cleaned' 	
	data = queryset(fastafile = inputs,taxonomiclevel=taxonomiclevel,multicopy = multicopystatus,hitstoreport = hitstoreport,subcluster = subcluster,fulldb = fulldb,markermatrixref = markermatrixref,taxmapping = taxmap,hmmpath = hmmpath,threads = threads,evaluecutoff = evaluecutoff,tmpdir = tmpdir,outputdir = outputdir)
	if os.path.exists(predictedgenesout) and not force:
		print('	ORF calling output exists, using these data. To regenerate, rename your output directory or run with the "--force" flag.')
	if os.path.exists(predictedgenesout) == False or force:
		data.call_orfs()	
	if os.path.exists(markerout) and not force:
		print('	HMM identification output exists, using these data. To regenerate, rename your output directory or run with the "--force" flag.')
	if os.path.exists(markerout)==False or force:
		data.identify_markers()
	markermatrix = data.parse_markers()
	distances = data.primary_classification()
	if subcluster == True:
		data.secondary_classification()
	data.parse_taxonomy()
	print('	Writing distance matrix and query hmm presence/absence matrix to file.')
	distances.to_pickle(outputdir + '/pairwise_distances.pickle')
	markermatrix.to_pickle(outputdir + '/query_markers.pickle')
	print('<<<<<< Output files are stored in %s >>>>>>>'%(outputdir))

	return([markermatrix,distances])

@cli.command('phylogeny')
@click.option('-c','--classifyout', required = True,default=1, help='Path to classification output directory',type = str)
@click.option('-d','--dbdir', required = True,default=1, help='Path to directory containing databases.',type = str)
@click.option('-o','--outputdir',required = False, default='vironomy_output', help='Path to phylogeny output directory [Default = vironomy_output]',type = str)
@click.option('-r','--tree_algorithm', default = 'iqtree', required=False, help='Tree building algorithm (iqtree, raxml, or fasttree) [Default = iqtree]',type = str)
@click.option('-a','--runmode', default = 'placement', required=False, help='placement [Default] or de_novo. Indicates if you want your queries placed in larger tree of references, or if you want them set alone on their own tree.',type = str)
@click.option('-m','--max_nodes_per_query', required = False,default=25, help='Maximum number of reference nodes to be potentially assigned to each query (max possible tree size is this value times the number of queries) [Default = 25].',type = int)
@click.option('-q','--min_marker_overlap_with_query', required = False,default=1, help='Minimum number of overlapping HMMs between a query its identified references [Default = 1].',type = int)
@click.option('-k','--min_marker_overlap_for_tree', required = False,default=1, help='Minimum number of overlapping HMMs that must be shared between viral genomes for them to be placed on the same tree. [Default = 1]',type = int)
@click.option('-p','--threads', required = False, default=1, help='Number of CPU threads to use [Default = 1].')
@click.option('-t','--tmpdir', required = False, default='tmp', help='Name of classification temporary directory [Default = tmp].')
@click.option('-g','--classification_filter', required = False, default = 'None',help='None/Phylum/Class/Order/Family/Genus/Species. Only include contigs with taxonomic classifications for at least this clade. [Default = None]')
@click.option('-u','--smallesttreesize', required = False, default = 3,help='Min number of genomes that can be on a tree. [Default = 3]')
@click.option('-y','--max_marker_overlap_range_for_tree', required = False, default = 10,help='Max allowable range in overlapping HMMs between any set of genomes in a tree. [Default = 10]')
@click.option('-w','--min_proportion_shared_hmm', required = False, default = 0.5,help='Proportion of genomes in a tree that must overlap by -k. In other words, if this is set to 1, all genomes in a tree with share at least -k HMMs. If set to the default, 0.5, any genome will share -k HMMs with 50% of other genomes on a tree [Default = 0.5]')
@click.option('-x','--global_min_hmm_prevalence', required = False, default = 1,help='Minimum prevalence of a given HMM across all viral contigs [Default = 1]')
@click.option('-f','--force', is_flag = True, help='Remake any existing ORF calling, HMM, or alignment files.')
@click.option('-b','--batch', is_flag = True, help='Do not generate treefiles -- instead create a config file that can be run on a slurm submission system.')
@click.option('-n','--non_redundant_trees', is_flag = True, help='Prevent viruses from appearing on multiple trees (relevant if k > 0).')
@click.option('-z','--tree_splitting_mode', required = False, default = 'hierarchical', help='Hierarchical, linkage based clustering to generate trees or use an iterative HMM overlap-based approach (the latter will have better coverage of your queries but have more distantly related genomes on the same tree, potentially). [Default = hierarchical].')
@click.option('-l','--taxonomiclevel',required = False, default='Genus', help='Target taxonomic classification level: Phylum, Class, Order, Family, Genus, Species [Default = Genus]',type = str)
@click.option('--treecutpoint', required = False, default = .25, help='Cutpoint on linkage dendrogram for hierarchical clustering. Will drastically impact number of trees. [Default = .25].')
@click.option('--linkagemethod', required = False, default = 'complete', help='Linkage method for hierarchical tree splitting. Complete, average, or single recommended. [Default = complete].')
#@click.option('-v','--verbose', is_flag=True, Show lots of tree building output?')
def phylogeny(linkagemethod,treecutpoint,taxonomiclevel,tree_splitting_mode,min_proportion_shared_hmm,global_min_hmm_prevalence,non_redundant_trees,classifyout,max_marker_overlap_range_for_tree,smallesttreesize,classification_filter,batch,force,runmode,dbdir,max_nodes_per_query,min_marker_overlap_with_query,min_marker_overlap_for_tree,tree_algorithm,tmpdir,threads,outputdir,distances = None, markermatrix = None):
	if distances is None:
		distances = pd.read_pickle(classifyout + '/pairwise_distances.pickle')
	if markermatrix is None:
		markermatrix = pd.read_pickle(classifyout + '/query_markers.pickle')
	fulldb = dbdir + '/full_sc_marker_db.csv'
	taxmap = dbdir + '/'+taxonomiclevel+'_group_taxid_contigid_mapping_annotation_data.tsv'
	genbankannos = dbdir + '/genbank_pfam_tgirfam_all_annotations_sc.txt'
	genbankorfs = dbdir +  '/genbank_predicted_proteins.faa'
	queryannos = classifyout +  '/query.pfam.tigrfam.annotations.cleaned'
	queryorfs = classifyout +  '/query_orfs.faa'
	simplifiedtaxa = classifyout +  '/simplified_taxonomy_report.csv'
	classval = pd.read_csv(simplifiedtaxa,index_col=0)
	if classification_filter=='None':
		filteredmarkers = classval
	else:
		filteredmarkers = classval[classval[classification_filter]!= 'Multiple hits']
	filteredmarkers = list(filteredmarkers['query'])
	distances = distances.loc[filteredmarkers,:]
	markermatrix = markermatrix.loc[filteredmarkers,:]
	taxmap = pd.read_csv(taxmap,index_col=0,sep='\t')
	treebuilder = treebuild(linkagemethod=linkagemethod,taxonomiclevel=taxonomiclevel,treecutpoint=treecutpoint,tree_splitting_mode=tree_splitting_mode,min_proportion_shared_hmm=min_proportion_shared_hmm,global_min_hmm_prevalence=global_min_hmm_prevalence,non_redundant_trees = non_redundant_trees,smallesttreesize = smallesttreesize,max_marker_overlap_range_for_tree = max_marker_overlap_range_for_tree,force=force,batch=batch, distances = distances,taxmap = taxmap, query_markermatrix = markermatrix,ref_markermatrix = fulldb,treetype = runmode,max_nodes_per_query = max_nodes_per_query,min_marker_overlap_with_query = min_marker_overlap_with_query, min_marker_overlap_for_tree = min_marker_overlap_for_tree,genbankannos = genbankannos,genbankorfs = genbankorfs,queryannos = queryannos,queryorfs = queryorfs,tree_algorithm = tree_algorithm,tmpdir = tmpdir,outdir = outputdir,threads = threads,bootstrapnum = 1000)
	if not force:
		alignments = []
		for root, dirs, files in os.walk(tmpdir):
			if 'contig_alignment_all_hmms.msa' in files:
				alignments.append(os.path.join(root, 'contig_alignment_all_hmms.msa'))
		if len(alignments) != 0:
			print('	Found merged aligments for %s trees: using those instead of regenerating. Run with --force to change this behavior.'%len(alignments))		
			trees = [x.split('/')[-2] for x in alignments]
			treebuilder.build_tree(trees)
			return()
	if runmode == 'de_novo':
		print('	Running de novo tree construction.')
		treebuilder.initialize_denovo_tree()
		fullmarkermatrix = treebuilder.split_denovo_tree()
	if runmode == 'placement':
		print('	Placing genomes with genbank references.')
		treebuilder.find_potential_nodes()
		fullmarkermatrix = treebuilder.winnow_nodes_and_split_trees()
	metadata_hmmcontent = treebuilder.find_tree_specific_hmms()
	trees,tree_contig_mapping = treebuilder.prep_for_alignment()
	# pickle the tree contig mapping dict for later
	with open(outputdir + '/tree_contig_mappingdict.pickle', 'wb') as handle:
	    pickle.dump(tree_contig_mapping, handle, protocol=pickle.HIGHEST_PROTOCOL)
	fullmarkermatrix.to_pickle(outputdir + '/fullmarkermatrix.pickle')
	treebuilder.generate_msas()
	treebuilder.combine_msas()
	treebuilder.build_tree(trees)

@cli.command('end_to_end')
@click.option('-i','--inputs', required=True, help='File containing your query genomes.',type = str)
@click.option('-d','--dbdir', required = True, help='Path to directory containing databases.',type = str)
@click.option('-o','--outputdir',required = False, default='vironomy_output', help='Path to classification output directory [Default = vironomy_output]',type = str)
@click.option('--hmmdb', required = False,default = 'Default', help='Selected HMM db. Default, NeoRdRp, or XXX. [Default = Default].',type = str)
@click.option('--multicopy', required = False,is_flag = True, help='Work with HMM that are multi-copy in a single genome, instead of only single copy ones, per your e-value cutoff.')
@click.option('-l','--taxonomiclevel',required = False, default='Genus', help='Target taxonomic classification level: Phylum, Class, Order, Family, Genus, Species [Default = Genus]',type = str)
@click.option('-h','--hitstoreport', required = False, default=5, help='Number of taxonomic hits to report. [Default = 5]',type = int)
@click.option('-s','--subcluster', required = False, default=True, help='True/False. Run secondary clustering for more accurate taxonomic classification [Default = True]')
@click.option('-e','--evaluecutoff', required = False, default=1, help='E-value cutoff for hmmsearch [Default = 1].',type = float)
@click.option('-r','--tree_algorithm', default = 'iqtree', required=False, help='Tree building algorithm (iqtree, raxml, or fasttree) [Default = iqtree]',type = str)
@click.option('-a','--runmode', default = 'placement', required=False, help='placement [Default] or de_novo. Indicates if you want your queries placed in larger tree of references, or if you want them set alone on their own tree.',type = str)
@click.option('-m','--max_nodes_per_query', required = False,default=25, help='Maximum number of reference nodes to be potentially assigned to each query (max possible tree size is this value times the number of queries) [Default = 25].',type = int)
@click.option('-q','--min_marker_overlap_with_query', required = False,default=1, help='Minimum number of overlapping HMMs between a query its identified references [Default = 1].',type = int)
@click.option('-k','--min_marker_overlap_for_tree', required = False,default=1, help='Minimum number of overlapping HMMs that must be shared between viral genomes for them to be placed on the same tree. [Default = 1]',type = int)
@click.option('-p','--threads', required = False, default=1, help='Number of CPU threads to use [Default = 1].')
@click.option('-t','--tmpdir', required = False, default='tmp_vironomy_end_to_end', help='Name of classification temporary directory [Default = tmp].')
@click.option('-g','--classification_filter', required = False, default = 'None',help='None/Phylum/Class/Order/Family/Genus/Species. Only include contigs with taxonomic classifications for at least this clade. [Default = None]')
@click.option('-f','--force', is_flag = True, help='Remake any existing ORF calling, HMM, or alignment files.')
@click.option('-b','--batch', is_flag = True, help='Do not generate treefiles -- instead create a config file that can be run on a slurm submission system.')
@click.option('-u','--smallesttreesize', required = False, default = 3,help='Min number of genomes that can be on a tree. [Default = 3]')
@click.option('-y','--max_marker_overlap_range_for_tree', required = False, default = 10,help='Max allowable range in overlapping HMMs between any set of genomes in a tree. [Default = 10]')
@click.option('-w','--min_proportion_shared_hmm', required = False, default = 0.5,help='Proportion of genomes in a tree that must overlap by -k. In other words, if this is set to 1, all genomes in a tree with share at least -k HMMs. If set to the default, 0.5, any genome will share -k HMMs with 50% of other genomes on a tree [Default = 0.5]')
@click.option('-x','--global_min_hmm_prevalence', required = False, default = 1,help='Minimum prevalence of a given HMM across all viral contigs [Default = 1]')
@click.option('-n','--non_redundant_trees', is_flag = True, help='Prevent viruses from appearing on multiple trees (relevant if k > 0).')
@click.option('-z','--tree_splitting_mode', required = False, default = 'hierarchical', help='Hierarchical, linkage based clustering to generate trees or use an iterative HMM overlap-based approach (the latter will have better coverage of your queries but have more distantly related genomes on the same tree, potentially). [Default = hierarchical].')
@click.option('--treecutpoint', required = False, default = .25, help='Cutpoint on linkage dendrogram for hierarchical clustering. Will drastically impact number of trees. [Default = .25].')
@click.option('--linkagemethod', required = False, default = 'complete', help='Linkage method for hierarchical tree splitting. Complete, average, or single recommended. [Default = complete].')
#@click.option('-v','--verbose', required = False, help='True/False. Show lots of tree building output?', is_flag=True)
@click.pass_context
def end_to_end(ctx,hmmdb,multicopy,treecutpoint,taxonomiclevel,linkagemethod,tree_splitting_mode,global_min_hmm_prevalence,min_proportion_shared_hmm,non_redundant_trees,smallesttreesize,max_marker_overlap_range_for_tree,classification_filter,batch,force,inputs,dbdir,outputdir,hitstoreport,subcluster,evaluecutoff,tree_algorithm,runmode,max_nodes_per_query,min_marker_overlap_with_query,min_marker_overlap_for_tree,threads,tmpdir):
	markermatrix,distances = ctx.invoke(classify,inputs = inputs,hmmdb = hmmdb, multicopy = multicopy,force = force,taxonomiclevel=taxonomiclevel,dbdir = dbdir,outputdir = outputdir,hitstoreport = hitstoreport,subcluster = subcluster,evaluecutoff = evaluecutoff,threads = threads,tmpdir = tmpdir)
	ctx.invoke(phylogeny,linkagemethod=linkagemethod,taxonomiclevel=taxonomiclevel,treecutpoint=treecutpoint,tree_splitting_mode=tree_splitting_mode,min_proportion_shared_hmm=min_proportion_shared_hmm,global_min_hmm_prevalence=global_min_hmm_prevalence,non_redundant_trees = non_redundant_trees,smallesttreesize = smallesttreesize,max_marker_overlap_range_for_tree = max_marker_overlap_range_for_tree, classification_filter = classification_filter,batch = batch, force = force, distances = distances, markermatrix = markermatrix, classifyout = outputdir,runmode = runmode,dbdir = dbdir,max_nodes_per_query = max_nodes_per_query,min_marker_overlap_with_query = min_marker_overlap_with_query, min_marker_overlap_for_tree = min_marker_overlap_for_tree,tree_algorithm = tree_algorithm, tmpdir = tmpdir, threads = threads, outputdir = outputdir)

@cli.command('download_db')
@click.option('-p','--output_path', required=True, default = '.', help='Path to the place you want to store your vironomy database folder. [Default = .]',type = str)
def download_databases(output_path):
	print('Downloading and untarring databases...')
	os.system("wget -P %s %s"%(output_path,"https://s3.us-east-1.wasabisys.com/vironomy-databases/vironomy_database.tar.gz"))
	os.system("tar -zxvf %s/%s -C %s"%(output_path,"vironomy_database.tar.gz",output_path))
	print("Databases have been downloaded and unpacked. When you run vironomy, write your dbdir path as: \n\n %s/vironomy_database"%(output_path))


def main():
	cli()

if __name__ == "__main__":
	main()








